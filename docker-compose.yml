# ========================================
# POS Dominicana - Docker Compose Production
# ========================================

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pos-dominicana-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: pos_dominicana_prod
      POSTGRES_USER: ${DB_USER:-pos_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - pos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pos_user}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # POS Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: pos-dominicana-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-pos_user}:${DB_PASSWORD:-secure_password_change_me}@postgres:5432/pos_dominicana_prod?schema=public
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://localhost:3000}
      - BUSINESS_NAME=${BUSINESS_NAME:-"Tu Empresa SRL"}
      - BUSINESS_RNC=${BUSINESS_RNC:-"130123456789"}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pos-network
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_backups:/app/backups
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (optional, for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: pos-dominicana-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - pos-network

  # Redis for session storage and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: pos-dominicana-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pos-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  pos-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  app_backups:
    driver: local
