generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String           @id @default(cuid())
  email                       String           @unique
  username                    String           @unique
  password                    String
  firstName                   String
  lastName                    String
  role                        UserRole         @default(CASHIER)
  isActive                    Boolean          @default(true)
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  auditLogs                   AuditLog[]
  employeeProfile             EmployeeProfile?
  inventoryAlertsAcknowledged InventoryAlert[] @relation("InventoryAlertAcknowledgedBy")
  printJobs                   PrintJob[]
  purchaseOrdersCreated       PurchaseOrder[]  @relation("PurchaseOrderCreatedBy")
  purchaseOrdersReceived      PurchaseOrder[]  @relation("PurchaseOrderReceivedBy")
  sales                       Sale[]
  stockTransfersApproved      StockTransfer[]  @relation("StockTransferApprovedBy")
  stockTransfersCreated       StockTransfer[]  @relation("StockTransferCreatedBy")
  stockTransfersReceived      StockTransfer[]  @relation("StockTransferReceivedBy")

  @@map("users")
}

model EmployeeProfile {
  id               String                @id @default(cuid())
  userId           String                @unique
  employeeCode     String                @unique
  hireDate         DateTime
  position         String
  department       String?
  salaryType       SalaryType            @default(FIXED)
  baseSalary       Decimal?              @db.Decimal(10, 2)
  commissionRate   Decimal               @default(0.00) @db.Decimal(5, 2)
  hourlyRate       Decimal?              @db.Decimal(8, 2)
  targetSales      Decimal?              @db.Decimal(12, 2)
  emergencyContact String?
  emergencyPhone   String?
  address          String?
  photoUrl         String?
  isActive         Boolean               @default(true)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  performance      EmployeePerformance[]
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  shifts           EmployeeShift[]
  timeEntries      TimeEntry[]

  @@map("employee_profiles")
}

model TimeEntry {
  id            String          @id @default(cuid())
  employeeId    String
  clockIn       DateTime
  clockOut      DateTime?
  breakStart    DateTime?
  breakEnd      DateTime?
  totalHours    Decimal         @default(0.00) @db.Decimal(4, 2)
  overtimeHours Decimal         @default(0.00) @db.Decimal(4, 2)
  notes         String?
  location      String?
  ipAddress     String?
  status        TimeEntryStatus @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  employee      EmployeeProfile @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model EmployeeShift {
  id            String          @id @default(cuid())
  employeeId    String
  shiftDate     DateTime        @db.Date
  startTime     DateTime        @db.Time(6)
  endTime       DateTime        @db.Time(6)
  breakDuration Int             @default(30)
  shiftType     ShiftType       @default(REGULAR)
  status        ShiftStatus     @default(SCHEDULED)
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  employee      EmployeeProfile @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_shifts")
}

model EmployeePerformance {
  id               String          @id @default(cuid())
  employeeId       String
  periodStart      DateTime        @db.Date
  periodEnd        DateTime        @db.Date
  salesCount       Int             @default(0)
  salesAmount      Decimal         @default(0.00) @db.Decimal(12, 2)
  commissionEarned Decimal         @default(0.00) @db.Decimal(10, 2)
  hoursWorked      Decimal         @default(0.00) @db.Decimal(6, 2)
  targetsMet       Int             @default(0)
  customerRating   Decimal?        @db.Decimal(3, 2)
  performanceScore Decimal?        @db.Decimal(5, 2)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  employee         EmployeeProfile @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_performance")
}

model Customer {
  id           String       @id @default(cuid())
  name         String
  email        String?
  phone        String?
  rnc          String?      @unique
  cedula       String?      @unique
  address      String?
  city         String?
  isActive     Boolean      @default(true)
  customerType CustomerType @default(INDIVIDUAL)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sales        Sale[]

  @@map("customers")
}

model RncRegistry {
  id       String   @id @default(cuid())
  rnc      String   @unique
  name     String
  status   String
  category String?
  lastSync DateTime @default(now())

  @@index([rnc])
  @@map("rnc_registry")
}

model NcfSequence {
  id            String    @id @default(cuid())
  type          NcfType   @unique
  currentNumber Int       @default(0)
  maxNumber     Int       @default(99999999)
  isActive      Boolean   @default(true)
  expiryDate    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sales         Sale[]

  @@map("ncf_sequences")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id                 String              @id @default(cuid())
  code               String              @unique
  name               String
  description        String?
  price              Decimal             @db.Decimal(10, 2)
  cost               Decimal?            @db.Decimal(10, 2)
  stock              Int                 @default(0)
  minStock           Int                 @default(0)
  isActive           Boolean             @default(true)
  taxable            Boolean             @default(true)
  categoryId         String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  barcode            String?             @unique
  maxStock           Int?
  reorderPoint       Int                 @default(10)
  supplierId         String?
  inventoryAlerts    InventoryAlert[]
  variants           ProductVariant[]
  category           Category?           @relation(fields: [categoryId], references: [id])
  supplier           Supplier?           @relation(fields: [supplierId], references: [id])
  purchaseOrderItems PurchaseOrderItem[]
  saleItems          SaleItem[]
  stockTransferItems StockTransferItem[]

  @@map("products")
}

model Supplier {
  id                 String          @id @default(cuid())
  name               String
  contactPerson      String?
  email              String?
  phone              String?
  address            String?
  city               String?
  country            String          @default("Rep√∫blica Dominicana")
  rnc                String?         @unique
  taxId              String?
  paymentTerms       String?
  creditLimit        Decimal?        @db.Decimal(12, 2)
  discountPercentage Decimal         @default(0.00) @db.Decimal(5, 2)
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  products           Product[]
  purchaseOrders     PurchaseOrder[]

  @@map("suppliers")
}

model PurchaseOrder {
  id           String              @id @default(cuid())
  poNumber     String              @unique
  supplierId   String
  orderDate    DateTime            @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  subtotal     Decimal             @default(0.00) @db.Decimal(12, 2)
  taxAmount    Decimal             @default(0.00) @db.Decimal(10, 2)
  totalAmount  Decimal             @default(0.00) @db.Decimal(12, 2)
  status       PurchaseOrderStatus @default(PENDING)
  notes        String?
  createdBy    String
  receivedBy   String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  items        PurchaseOrderItem[]
  creator      User                @relation("PurchaseOrderCreatedBy", fields: [createdBy], references: [id])
  receiver     User?               @relation("PurchaseOrderReceivedBy", fields: [receivedBy], references: [id])
  supplier     Supplier            @relation(fields: [supplierId], references: [id])

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  productId        String
  quantityOrdered  Int
  quantityReceived Int           @default(0)
  unitCost         Decimal       @db.Decimal(10, 2)
  totalCost        Decimal       @db.Decimal(12, 2)
  createdAt        DateTime      @default(now())
  product          Product       @relation(fields: [productId], references: [id])
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@map("purchase_order_items")
}

model StockTransfer {
  id             String              @id @default(cuid())
  transferNumber String              @unique
  fromLocation   String
  toLocation     String
  transferDate   DateTime            @default(now())
  status         StockTransferStatus @default(PENDING)
  notes          String?
  createdBy      String
  approvedBy     String?
  receivedBy     String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  items          StockTransferItem[]
  approver       User?               @relation("StockTransferApprovedBy", fields: [approvedBy], references: [id])
  creator        User                @relation("StockTransferCreatedBy", fields: [createdBy], references: [id])
  receiver       User?               @relation("StockTransferReceivedBy", fields: [receivedBy], references: [id])

  @@map("stock_transfers")
}

model StockTransferItem {
  id               String        @id @default(cuid())
  transferId       String
  productId        String
  quantitySent     Int
  quantityReceived Int           @default(0)
  createdAt        DateTime      @default(now())
  product          Product       @relation(fields: [productId], references: [id])
  transfer         StockTransfer @relation(fields: [transferId], references: [id], onDelete: Cascade)

  @@map("stock_transfer_items")
}

model InventoryAlert {
  id             String        @id @default(cuid())
  productId      String
  alertType      AlertType
  threshold      Int
  currentStock   Int
  message        String
  severity       AlertSeverity @default(MEDIUM)
  isAcknowledged Boolean       @default(false)
  acknowledgedBy String?
  acknowledgedAt DateTime?
  createdAt      DateTime      @default(now())
  acknowledger   User?         @relation("InventoryAlertAcknowledgedBy", fields: [acknowledgedBy], references: [id])
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory_alerts")
}

model ProductVariant {
  id           String   @id @default(cuid())
  productId    String
  variantName  String
  variantValue String
  sku          String?  @unique
  barcode      String?  @unique
  price        Decimal? @db.Decimal(10, 2)
  cost         Decimal? @db.Decimal(10, 2)
  stock        Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Sale {
  id            String        @id @default(cuid())
  saleNumber    String        @unique
  ncf           String?       @unique
  ncfType       NcfType?
  subtotal      Decimal       @db.Decimal(10, 2)
  itbis         Decimal       @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod @default(CASH)
  status        SaleStatus    @default(COMPLETED)
  notes         String?
  cashierId     String
  customerId    String?
  ncfSequenceId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customerName  String?
  customerRnc   String?
  items         SaleItem[]
  cashier       User          @relation(fields: [cashierId], references: [id])
  customer      Customer?     @relation(fields: [customerId], references: [id])
  ncfSequence   NcfSequence?  @relation(fields: [ncfSequenceId], references: [id])

  @@map("sales")
}

model SaleItem {
  id        String   @id @default(cuid())
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  saleId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model AuditLog {
  id         String      @id @default(cuid())
  action     AuditAction
  entityType String
  entityId   String
  oldValue   Json?
  newValue   Json?
  userId     String
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model BusinessSettings {
  id               String   @id @default(cuid())
  name             String
  rnc              String
  address          String
  phone            String
  email            String
  website          String?
  logo             String?
  slogan           String?
  city             String
  province         String
  country          String   @default("Rep√∫blica Dominicana")
  postalCode       String?
  taxRegime        String   @default("R√©gimen Ordinario")
  economicActivity String?
  receiptFooter    String?
  invoiceTerms     String?
  warrantyInfo     String?
  isActive         Boolean  @default(true)
  isDefault        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("business_settings")
}

model PosHardware {
  id               String           @id @default(cuid())
  deviceType       HardwareType
  deviceName       String
  deviceModel      String?
  connectionType   ConnectionType
  connectionString String?
  isEnabled        Boolean          @default(true)
  isOnline         Boolean          @default(false)
  lastPing         DateTime?
  configuration    Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  statusLogs       HardwareStatus[]
  printJobs        PrintJob[]

  @@map("pos_hardware")
}

model PrintJob {
  id           String         @id @default(cuid())
  printerId    String
  jobType      PrintJobType
  content      String
  priority     Int            @default(0)
  status       PrintJobStatus @default(PENDING)
  attempts     Int            @default(0)
  maxAttempts  Int            @default(3)
  errorMessage String?
  createdBy    String
  processedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creator      User           @relation(fields: [createdBy], references: [id])
  printer      PosHardware    @relation(fields: [printerId], references: [id], onDelete: Cascade)

  @@map("print_jobs")
}

model HardwareStatus {
  id        String             @id @default(cuid())
  deviceId  String
  status    HardwareStatusType
  message   String?
  data      Json?
  timestamp DateTime           @default(now())
  device    PosHardware        @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("hardware_status")
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}

enum SalaryType {
  FIXED
  HOURLY
  COMMISSION
  HYBRID
}

enum TimeEntryStatus {
  ACTIVE
  COMPLETED
  BREAK
  OVERTIME
}

enum ShiftType {
  REGULAR
  OVERTIME
  HOLIDAY
  WEEKEND
}

enum ShiftStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  MISSED
  CANCELLED
}

enum CustomerType {
  INDIVIDUAL
  BUSINESS
}

enum NcfType {
  B01
  B02
  B03
  B04
  B11
  B12
  B13
  B14
  B15
}

enum PurchaseOrderStatus {
  PENDING
  ORDERED
  PARTIAL_RECEIVED
  RECEIVED
  CANCELLED
}

enum StockTransferStatus {
  PENDING
  APPROVED
  IN_TRANSIT
  RECEIVED
  CANCELLED
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
  OVERSTOCK
  REORDER_POINT
  EXPIRY_WARNING
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  CHECK
  CREDIT
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  SALE_CREATE
  SALE_CANCEL
  NCF_GENERATE
}

enum HardwareType {
  THERMAL_PRINTER
  BARCODE_SCANNER
  CASH_DRAWER
  CARD_READER
  SCALE
  CUSTOMER_DISPLAY
}

enum ConnectionType {
  USB
  SERIAL
  BLUETOOTH
  WIFI
  ETHERNET
  PARALLEL
}

enum PrintJobType {
  RECEIPT
  INVOICE
  REPORT
  LABEL
  BARCODE
}

enum PrintJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum HardwareStatusType {
  ONLINE
  OFFLINE
  ERROR
  MAINTENANCE
  LOW_PAPER
  LOW_INK
  PAPER_JAM
  CONNECTION_LOST
}
